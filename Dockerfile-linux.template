{{
	def version_id:
		# https://www.php.net/phpversion
		# $version_id = $major_version * 10000 + $minor_version * 100 + $release_version;
		sub("[a-zA-Z].*$"; "")
		| split(".")
		| (
			(.[0] // 0 | tonumber) * 10000
			+ (.[1] // 0 | tonumber) * 100
			+ (.[2] // 0 | tonumber)
		)
	;
	def is_alpine:
		env.from | startswith("alpine")
-}}
FROM {{ env.from }}

{{ if is_alpine then "" else ( -}}
# prevent Debian's PHP packages from being installed
# https://github.com/docker-library/php/pull/542
RUN set -eux; \
	{ \
		echo 'Package: php*'; \
		echo 'Pin: release *'; \
		echo 'Pin-Priority: -1'; \
	} > /etc/apt/preferences.d/no-debian-php

{{ ) end -}}
# dependencies required for running "phpize"
{{ if is_alpine then ( -}}
# these get automatically installed and removed by "docker-php-ext-*" (unless they're already installed)
{{ ) else ( -}}
# (see persistent deps below)
{{ ) end -}}
ENV PHPIZE_DEPS \
		autoconf \
		procps \
		wget \
		dpkg-dev {{ if is_alpine then "dpkg " else "" end }}\
		file \
		g++ \
		gcc \
		libc-dev \
		make \
		{{ if is_alpine then "pkgconf" else "pkg-config" end }} \
		re2c

# persistent / runtime deps
{{ if is_alpine then ( -}}
# RUN set -eux; \
# 	sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

RUN apk add --no-cache \
		ca-certificates \
		curl \
		openssl \
		tar \
		xz

# ensure app user exists
RUN set -eux; \
	addgroup -Sg 83 app; \
	adduser -u 82 -D -S  -s /sbin/nologin -G app -g app app
#	adduser -u 82 -D -S -G app app
# 82 is the standard uid/gid for "app" in Alpine
# https://git.alpinelinux.org/aports/tree/main/apache2/apache2.pre-install?h=3.14-stable
# https://git.alpinelinux.org/aports/tree/main/lighttpd/lighttpd.pre-install?h=3.14-stable
# https://git.alpinelinux.org/aports/tree/main/nginx/nginx.pre-install?h=3.14-stable
{{ ) else ( -}}
RUN set -eux; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		$PHPIZE_DEPS \
		apt-transport-https \
		ca-certificates \
		ncat \
		ca-certificates \
		curl \
		xz-utils \
	; \
	rm -rf /var/lib/apt/lists/*
# RUN set -eux; \
# { \
# 	echo "deb https://mirrors.aliyun.com/debian/ bullseye main non-free contrib"; \
#   echo "deb-src https://mirrors.aliyun.com/debian/ bullseye main non-free contrib"; \
#   echo "deb https://mirrors.aliyun.com/debian-security/ bullseye-security main"; \
#   echo "deb-src https://mirrors.aliyun.com/debian-security/ bullseye-security main"; \
#   echo "deb https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib"; \
#   echo "deb-src https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib"; \
#   echo "deb https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib"; \
#   echo "deb-src https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib"; \
# } | tee /etc/apt/sources.list
# ensure app user exists
RUN set -eux; \
	addgroup --gid 82 --system app; \
	adduser --uid 82 --no-create-home --disabled-login --disabled-password --system --ingroup app app;
{{ ) end -}}

ENV PHP_INI_DIR=/usr/local/etc/php \
	APP_ROOT=/app-src \
	PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/app-src:/app-src/bin
RUN set -eux; \
	mkdir -p "$PHP_INI_DIR/conf.d"; \
# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)
	[ ! -d ${APP_ROOT} ]; \
	mkdir -p ${APP_ROOT}; \
	chown app:app ${APP_ROOT}; \
	chmod 777 ${APP_ROOT}

{{ if env.variant == "apache" then ( -}}
ENV APACHE_CONFDIR /etc/apache2
ENV APACHE_ENVVARS $APACHE_CONFDIR/envvars

RUN set -eux; \
	apt-get update; \
	apt-get install -y --no-install-recommends apache2; \
	rm -rf /var/lib/apt/lists/*; \
	\
# generically convert lines like
#   export APACHE_RUN_USER=www-data
# into
#   : ${APACHE_RUN_USER:=www-data}
#   export APACHE_RUN_USER
# so that they can be overridden at runtime ("-e APACHE_RUN_USER=...")
	sed -ri 's/^export ([^=]+)=(.*)$/: ${\1:=\2}\nexport \1/' "$APACHE_ENVVARS"; \
	\
# setup directories and permissions
	. "$APACHE_ENVVARS"; \
	for dir in \
		"$APACHE_LOCK_DIR" \
		"$APACHE_RUN_DIR" \
		"$APACHE_LOG_DIR" \
{{ if env.suite == "bullseye" then "" else ( -}}
# https://salsa.debian.org/apache-team/apache2/-/commit/b97ca8714890ead1ba6c095699dde752e8433205
		"$APACHE_RUN_DIR/socks" \
{{ ) end -}}
	; do \
		rm -rvf "$dir"; \
		mkdir -p "$dir"; \
		chown "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$dir"; \
# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)
		chmod 1777 "$dir"; \
	done; \
	\
# delete the "index.html" that installing Apache drops in here
	rm -rvf /var/www/html/*; \
	\
# logs should go to stdout / stderr
	ln -sfT /dev/stderr "$APACHE_LOG_DIR/error.log"; \
	ln -sfT /dev/stdout "$APACHE_LOG_DIR/access.log"; \
	ln -sfT /dev/stdout "$APACHE_LOG_DIR/other_vhosts_access.log"; \
	chown -R --no-dereference "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$APACHE_LOG_DIR"

# Apache + PHP requires preforking Apache for best results
RUN a2dismod mpm_event && a2enmod mpm_prefork

# PHP files should be handled by PHP, and should be preferred over any other file type
RUN { \
		echo '<FilesMatch \.php$>'; \
		echo '\tSetHandler application/x-httpd-php'; \
		echo '</FilesMatch>'; \
		echo; \
		echo 'DirectoryIndex disabled'; \
		echo 'DirectoryIndex index.php index.html'; \
		echo; \
		echo '<Directory /var/www/>'; \
		echo '\tOptions -Indexes'; \
		echo '\tAllowOverride All'; \
		echo '</Directory>'; \
	} | tee "$APACHE_CONFDIR/conf-available/docker-php.conf" \
	&& a2enconf docker-php

{{ ) else "" end -}}
# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# https://github.com/docker-library/php/issues/272
# -D_LARGEFILE_SOURCE and -D_FILE_OFFSET_BITS=64 (https://www.php.net/manual/en/intro.filesystem.php)
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -pie"

ENV GPG_KEYS {{
	{
		# https://www.php.net/gpg-keys.php
		# https://www.php.net/downloads.php

		"8.4": [
			# https://wiki.php.net/todo/php84#release_managers
			# https://www.php.net/gpg-keys.php#gpg-8.4
			"AFD8 691F DAED F03B DF6E  4605 63F1 5A9B 7153 76CA", # ericmann
			"9D7F 99A0 CB8F 05C8 A695  8D62 56A9 7AF7 600A 39A6", # calvinb
			"0616 E93D 95AF 4712 43E2  6761 7704 26E1 7EBB B3DD"  # saki
		],

		"8.3": [
			# https://wiki.php.net/todo/php83#release_managers
			# https://www.php.net/gpg-keys.php#gpg-8.3
			"1198 C011 7593 497A 5EC5  C199 286A F1F9 8974 69DC", # pierrick
			"C28D 9375 7560 3EB4 ABB7  2586 1C07 79DC 5C0A 9DE4", # bukka
			"AFD8 691F DAED F03B DF6E  4605 63F1 5A9B 7153 76CA"  # ericmann
		],

		"8.2": [
			# https://wiki.php.net/todo/php82#release_managers
			# https://www.php.net/gpg-keys.php#gpg-8.2
			"39B6 4134 3D8C 104B 2B14  6DC3 F9C3 9DC0 B969 8544", # ramsey
			"E609 13E4 DF20 9907 D8E3  0D96 659A 97C9 CF2A 795A", # sergey
			"1198 C011 7593 497A 5EC5  C199 286A F1F9 8974 69DC"  # pierrick
		],

		"8.1": [
			# https://wiki.php.net/todo/php81#release_managers
			# https://www.php.net/gpg-keys.php#gpg-8.1
			"5289 95BF EDFB A719 1D46  839E F9BA 0ADA 31CB D89E", # krakjoe
			"39B6 4134 3D8C 104B 2B14  6DC3 F9C3 9DC0 B969 8544", # ramsey
			"F1F6 9223 8FBC 1666 E5A5  CCD4 199F 9DFE F6FF BAFD"  # patrickallaert
		],

		"8.0": [
			# https://wiki.php.net/todo/php80#release_managers
			# https://www.php.net/gpg-keys.php#gpg-8.0
			"1729 F839 38DA 44E2 7BA0  F4D3 DBDB 3974 70D1 2172", # pollita
			"BFDD D286 4282 4F81 18EF  7790 9B67 A5C1 2229 118F", # carusogabriel
			"2C16 C765 DBE5 4A08 8130  F1BC 4B9B 5F60 0B55 F3B4", # carusogabriel
			"39B6 4134 3D8C 104B 2B14  6DC3 F9C3 9DC0 B969 8544"  # ramsey
		],
	}[env.version | rtrimstr("-rc")] // error("missing GPG keys for " + env.version)
	| map(gsub(" "; ""))
	| join(" ")
}}

ENV PHP_VERSION {{ .version }}
ENV PHP_URL="{{ .url }}" PHP_ASC_URL="{{ .ascUrl // "" }}"
ENV PHP_SHA256="{{ .sha256 // "" }}"

RUN set -eux; \
	\
{{ if is_alpine then ( -}}
	apk add --no-cache --virtual .fetch-deps gnupg; \
{{ ) else ( -}}
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update; \
	apt-get install -y --no-install-recommends gnupg; \
	rm -rf /var/lib/apt/lists/*; \
{{ ) end -}}
	\
	mkdir -p /usr/src; \
	cd /usr/src; \
	\
	curl -fsSL -o php.tar.xz "$PHP_URL"; \
	\
	if [ -n "$PHP_SHA256" ]; then \
		echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -; \
	fi; \
	\
	if [ -n "$PHP_ASC_URL" ]; then \
		curl -fsSL -o php.tar.xz.asc "$PHP_ASC_URL"; \
		export GNUPGHOME="$(mktemp -d)"; \
		for key in $GPG_KEYS; do \
			gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; \
		done; \
		gpg --batch --verify php.tar.xz.asc php.tar.xz; \
		gpgconf --kill all; \
		rm -rf "$GNUPGHOME"; \
	fi; \
	\
{{ if is_alpine then ( -}}
	apk del --no-network .fetch-deps
{{ ) else ( -}}
	apt-mark auto '.*' > /dev/null; \
	apt-mark manual $savedAptMark > /dev/null; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false
{{ ) end -}}

COPY docker-php-source /usr/local/bin/

RUN set -eux; \
{{ if is_alpine then ( -}}
	apk add --no-cache --virtual .build-deps \
{{ ) else ( -}}
	\
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
{{ ) end -}}
{{
	[
		[ if is_alpine then
			# alpine packages
			"$PHPIZE_DEPS",
			"argon2-dev",
			"coreutils",
			"curl-dev",
			"gnu-libiconv-dev", # https://www.php.net/manual/en/intro.iconv.php "it'd be a good idea to install the GNU libiconv library"
			"libsodium-dev",
			"libxml2-dev",
			"openssl-dev",
			"readline-dev",
			"sqlite-dev",
			# https://github.com/docker-library/php/issues/888
			"linux-headers",
			# oniguruma is part of mbstring in php 7.4+
			"oniguruma-dev",
			"lz4",
			"lz4-dev",
			"lz4-libs",
			"zstd-dev",
			"zstd-libs"
		else
			# debian packages
			"libargon2-dev",
			"libcurl4-openssl-dev",
			"libreadline-dev",
			"libsodium-dev",
			"libssl-dev",
			"libxml2-dev",
			"zlib1g-dev",
			# oniguruma is part of mbstring in php 7.4+
			"libonig-dev",
			"liblz4-dev",
			"libzstd-dev",
			"libsqlite3-dev"
		end ] | sort[] | (
-}}
		{{ . }} \
{{
		)
	] | add
-}}
	; \
	\
{{ if is_alpine then ( -}}
# make sure musl's iconv doesn't get used (https://www.php.net/manual/en/intro.iconv.php)
	rm -vf /usr/include/iconv.h; \
	\
{{ ) else "" end -}}
	export \
		CFLAGS="$PHP_CFLAGS" \
		CPPFLAGS="$PHP_CPPFLAGS" \
		LDFLAGS="$PHP_LDFLAGS" \
# https://github.com/php/php-src/blob/d6299206dd828382753453befd1b915491b741c6/configure.ac#L1496-L1511
		PHP_BUILD_PROVIDER='https://github.com/docker-library/php' \
		PHP_UNAME='Linux - Docker' \
	; \
	docker-php-source extract; \
	cd /usr/src/php; \
	gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; \
{{ if is_alpine then "" else ( -}}
	debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)"; \
# https://bugs.php.net/bug.php?id=74125
	if [ ! -d /usr/include/curl ]; then \
		ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl; \
	fi; \
{{ ) end -}}
	./configure \
		--build="$gnuArch" \
		--with-config-file-path="$PHP_INI_DIR" \
		--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
		\
# make sure invalid --configure-flags are fatal errors instead of just warnings
		--enable-option-checking=fatal \
		\
# https://github.com/docker-library/php/issues/439
		--with-mhash \
		\
# https://github.com/docker-library/php/issues/822
		--with-pic \
		\
{{ if env.version | rtrimstr("-rc") == "8.1" then ( -}}
# --enable-ftp is included here for compatibility with existing versions. ftp_ssl_connect() needed ftp to be compiled statically before PHP 7.0 (see https://github.com/docker-library/php/issues/236).
		--enable-ftp \
{{ ) else "" end -}}
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
		--enable-mbstring \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
		--enable-mysqlnd \
# https://wiki.php.net/rfc/argon2_password_hash
		--with-password-argon2 \
# https://wiki.php.net/rfc/libsodium
		--with-sodium=shared \
# always build against system sqlite3 (https://github.com/php/php-src/commit/6083a387a81dbbd66d6316a3a12a63f06d5f7109)
		--with-pdo-sqlite=/usr \
		--with-sqlite3=/usr \
		\
		--with-curl \
		--with-iconv{{ if is_alpine then "=/usr" else "" end }} \
		--with-openssl \
		--with-readline \
		--with-zlib \
		\
{{ if env.variant | IN("cli", "zts") then ( -}}
# https://github.com/docker-library/php/pull/1259
		--enable-phpdbg \
		--enable-phpdbg-readline \
{{ ) else ( -}}
# https://github.com/bwoebi/phpdbg-docs/issues/1#issuecomment-163872806 ("phpdbg is primarily a CLI debugger, and is not suitable for debugging an fpm stack.")
		--disable-phpdbg \
{{ ) end -}}
		\
# in PHP 7.4+, the pecl/pear installers are officially deprecated (requiring an explicit "--with-pear")
		--with-pear \
		\
{{ if env.version | rtrimstr("-rc") | IN("8.1", "8.2") then ( -}}
# bundled pcre does not support JIT on riscv64 until 10.41 (php 8.3+)
# https://github.com/PCRE2Project/pcre2/commits/pcre2-10.41/src/sljit/sljitNativeRISCV_64.c
# https://github.com/php/php-src/tree/php-8.3.0/ext/pcre/pcre2lib
{{ if is_alpine then ( -}}
		$(test "$gnuArch" = 'riscv64-linux-musl' && echo '--without-pcre-jit') \
{{ ) else ( -}}
		$(test "$gnuArch" = 'riscv64-linux-gnu' && echo '--without-pcre-jit') \
{{ ) end -}}
{{ ) else "" end -}}
{{ if is_alpine then "" else ( -}}
		--with-libdir="lib/$debMultiarch" \
{{ ) end -}}
{{ # https://github.com/docker-library/php/issues/280 -}}
{{ if env.variant | IN("cli", "zts") then "" else ( -}}
		\
		--disable-cgi \
{{ ) end -}}
{{ # zts + alpine special cased for embed (otherwise zts is effectively cli): https://github.com/docker-library/php/pull/1342 -}}
{{ if (env.variant == "zts") or (env.variant == "cli" and (is_alpine | not)) then ( -}}
		\
# https://github.com/docker-library/php/pull/939#issuecomment-730501748
		--enable-embed \
{{ ) else "" end -}}
{{ if env.variant == "zts" then ( -}}
		\
		--enable-zts \
# https://externals.io/message/118859
		--disable-zend-signals \
{{ if env.version | rtrimstr("-rc") | IN("8.1", "8.2") then ( -}}
		--enable-zend-max-execution-timers \
{{ ) else "" end -}}
{{ ) else "" end -}}
{{ if env.DOCKER_PHP_ENABLE_DEBUG then ( -}}
{{ # DOCKER_PHP_ENABLE_DEBUG is not used or supported by official-images; this is for users who want to build their own php image with debug enabled -}}
{{ # example usage to regenerate Dockerfiles with debug enabled: "DOCKER_PHP_ENABLE_DEBUG=1 ./apply-templates" -}}
		--enable-debug \
{{ ) else "" end -}}
	; \
	make -j "$(nproc)"; \
	find -type f -name '*.a' -delete; \
	make install; \
{{ if env.DOCKER_PHP_ENABLE_DEBUG then "" else ( -}}
{{ # DOCKER_PHP_ENABLE_DEBUG is not used by official-images -}}
	find \
		/usr/local \
		-type f \
		-perm '/0111' \
		-exec sh -euxc ' \
			strip --strip-all "$@" || : \
		' -- '{}' + \
	; \
{{ ) end -}}
	make clean; \
	\
# https://github.com/docker-library/php/issues/692 (copy default example "php.ini" files somewhere easily discoverable)
	cp -v php.ini-* "$PHP_INI_DIR/"; \
	cp -v php.ini-production "$PHP_INI_DIR/php.ini"; \
	\
	cd /; \
	docker-php-source delete; \
	\
{{ if is_alpine then ( -}}
	runDeps="$( \
		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
			| tr ',' '\n' \
			| sort -u \
			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)"; \
	apk add --no-cache $runDeps; \
		\
	# apk del --no-network .build-deps; \
		\
	apk add --no-cache --virtual .build-deps \
	g++ \
	gcc \
	libc-dev \
	make \
	pkgconf \
	autoconf; \
{{ ) else ( -}}
# reset apt-mark's "manual" list so that "purge --auto-remove" will remove all build dependencies
	apt-mark auto '.*' > /dev/null; \
	[ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
	find /usr/local -type f -executable -exec ldd '{}' ';' \
		| awk '/=>/ { so = $(NF-1); if (index(so, "/usr/local/") == 1) { next }; gsub("^/(usr/)?", "", so); printf "*%s\n", so }' \
		| sort -u \
		| xargs -r dpkg-query --search \
		| cut -d: -f1 \
		| sort -u \
		| xargs -r apt-mark manual \
	; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	rm -rf /var/lib/apt/lists/*; \
{{ ) end -}}
	\
	# update pecl channel definitions https://github.com/docker-library/php/issues/443
  pecl update-channels; \
	pecl install msgpack; \
	pecl install igbinary; \
	pecl install ds; \
	\
	# pecl install --configureoptions 'enable-redis-igbinary="yes" \
	# enable-redis-lzf="yes" enable-redis-zstd="yes" enable-redis-msgpack="yes" \
	# enable-redis-lz4="yes" with-liblz4="yes"' redis \
	\ 
	{{ if [ "8.4" ] | index(env.version | rtrimstr("-rc")) then "pecl install redis;" else "pecl install redis;" end}} \
	{{ if is_alpine then "apk del --no-network .build-deps;" else "" end}} \
	rm -rf /tmp/pear ~/.pearrc; \
	rm -rf /tmp/*; \
	\
# smoke test
	php --version
COPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/

# sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)
RUN docker-php-ext-enable sodium; \
	docker-php-ext-enable ds; \
	docker-php-ext-enable igbinary; \
	docker-php-ext-enable msgpack; \
	{{ if [ "8.4" ] | index(env.version | rtrimstr("-rc")) then "docker-php-ext-enable redis;" else "docker-php-ext-enable redis;" end}} \
	sed -i "s@;date.timezone =@date.timezone = Asia/Shanghai@g" "$PHP_INI_DIR/php.ini"; \
	sed -i "s@upload_max_filesize = 2M@upload_max_filesize = 2048M@g" "$PHP_INI_DIR/php.ini"; \
	sed -i "s@post_max_size = 8M@post_max_size = 2048M@g" "$PHP_INI_DIR/php.ini"; \
	sed -i "s@max_input_time = 60@max_input_time = 1800@g" "$PHP_INI_DIR/php.ini"; \
	sed -i "s@max_execution_time = 30@max_execution_time = 1800M@g" "$PHP_INI_DIR/php.ini"; \
	sed -i "s@memory_limit = 128M@memory_limit = 2048M@g" "$PHP_INI_DIR/php.ini"; \
	php --ri redis

{{ if env.variant == "swoole" then ( -}}
# swoole module
ENV EXTRA_EXT \
  bcmath bz2 calendar exif ffi gd gettext intl \
  mysqli pcntl pdo_mysql pdo_pgsql shmop soap \
  sockets sysvmsg sysvsem sysvshm tidy zip

ENV EXTRA_LIBS \
  autoconf \
	{{ if is_alpine then "libbz2" else "libbz2-dev" end }} \
  libffi-dev \
	{{ if is_alpine then "zlib-dev" else "zlib1g-dev" end }} \
  libpng-dev \
	{{ if is_alpine then "icu-dev" else "libicu-dev" end }} \
  libpq-dev \
  libxml2-dev \
  libzip-dev \
{{ if is_alpine then ( -}}
	curl-dev \
	linux-headers \
	openssl-dev \
	pcre-dev \
	pcre2-dev \
	libintl \
	gettext-dev \
	brotli-dev \
	sqlite-dev \
	lz4 \
	lz4-dev \
	lz4-libs \
	zstd-dev \
	zstd-libs \
{{ ) else ( -}}
	libpcre3 \
	libpcre3-dev\
	libssl-dev \
	libcurl4-openssl-dev \
	libbrotli1 \
	libbrotli-dev \
	liblz4-dev \
	libzstd-dev \
	libsqlite3-dev \
{{ ) end -}}
	{{ if is_alpine then "tidyhtml-dev" else "libtidy-dev" end }} \
	{{ if is_alpine then "c-ares-dev" else "libc-ares-dev" end }} \
	{{ if is_alpine then "zlib-dev" else "libzip-dev" end }}

RUN set -eux; \
{{ if is_alpine then ( -}}
	runDeps="$( \
		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
			| tr ',' '\n' \
			| sort -u \
			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)"; \
	apk add --no-cache $runDeps; \
	apk add --no-cache  --update --virtual .build-deps \
	g++ \
	gcc \
	libc-dev \
	make \
	pkgconf \
	autoconf $EXTRA_LIBS
{{ ) else ( -}}
	apt-get update; \
	apt-get install -y --no-install-recommends $EXTRA_LIBS; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	rm -rf /var/lib/apt/lists/*
{{ ) end -}}

RUN set -ex; \
	pecl channel-update pecl.php.net; \
	docker-php-ext-install $EXTRA_EXT; \
	{{ if [ "8.4" ] | index(env.version | rtrimstr("-rc")) then "docker-php-ext-enable redis;" else "docker-php-ext-enable redis;" end}} \
	docker-php-ext-install sockets; \
	docker-php-source extract; \
	pecl install --configureoptions 'enable-sockets="no" enable-openssl="yes" \
	enable-mysqlnd="no" enable-http2="yes" enable-swoole-json="yes" enable-swoole-curl="yes"\
	enable-cares="yes" enable-brotli="yes" enable-swoole-pgsql="yes" \
	with-swoole-odbc="no" with-swoole-oracle="no" enable-swoole-sqlite="yes" \
	with-openssl-dir="/usr"' swoole-6.0.0RC1; \
	docker-php-ext-enable swoole; \
	docker-php-source delete; \
	php --version; \
	php -m; \
	{ \
	echo "[swoole]"; \
	echo "extension=swoole"; \
	echo "swoole.unixsock_buffer_size=512M"; \
	echo "swoole.use_shortname=Off"; \
	echo "swoole.enable_preemptive_scheduler=On"; \
	} | tee /usr/local/etc/php/conf.d/docker-php-ext-swoole.ini; \
	{{ if is_alpine then "apk del --no-network .build-deps;" else "" end}} \
	rm -rf /tmp/pear ~/.pearrc; \
	rm -rf /tmp/*
{{ ) else "" end -}}
{{ if env.variant == "swow" then ( -}}
# swow
ENV EXTRA_EXT \
  bcmath bz2 calendar exif ffi gd gettext intl \
  mysqli pcntl pdo_mysql pdo_pgsql shmop soap \
  sockets sysvmsg sysvsem sysvshm tidy zip

ENV EXTRA_LIBS \
  autoconf \
	$PHPIZE_DEPS \
	{{ if is_alpine then "libbz2" else "libbz2-dev" end }} \
  libffi-dev \
	{{ if is_alpine then "zlib-dev" else "zlib1g-dev" end }} \
  libpng-dev \
	{{ if is_alpine then "icu-dev" else "libicu-dev" end }} \
  libpq-dev \
  libxml2-dev \
  libzip-dev \
	openssl \
	git \
	bash \
{{ if is_alpine then ( -}}
	curl-dev \
	linux-headers \
	openssl-dev \
	pcre-dev \
	pcre2-dev \
	libintl \
	gettext-dev \
{{ ) else ( -}}
	libpcre3 \
	libpcre3-dev\
	libssl-dev \
	libcurl4-openssl-dev \
{{ ) end -}}
	{{ if is_alpine then "tidyhtml-dev" else "libtidy-dev" end }} \
	{{ if is_alpine then "c-ares-dev" else "libc-ares-dev" end }} \
	{{ if is_alpine then "zlib-dev" else "libzip-dev" end }}

RUN set -eux; \
{{ if is_alpine then ( -}}
	runDeps="$( \
		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
			| tr ',' '\n' \
			| sort -u \
			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)"; \
	apk add --no-cache $runDeps; \
	apk add --no-cache  --update --virtual .build-deps \
	g++ \
	gcc \
	libc-dev \
	make \
	pkgconf \
	autoconf $EXTRA_LIBS
{{ ) else ( -}}
	apt-get update; \
	apt-get install -y --no-install-recommends $EXTRA_LIBS; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	rm -rf /var/lib/apt/lists/*
{{ ) end -}}

RUN set -ex; \
	pecl channel-update pecl.php.net; \
	docker-php-ext-install $EXTRA_EXT; \
	{{ if [ "8.4" ] | index(env.version | rtrimstr("-rc")) then "docker-php-ext-enable redis;" else "docker-php-ext-enable redis;" end}} \
	docker-php-ext-install sockets; \
	docker-php-source extract; \
	docker-php-source delete; \
	# download
 	cd /tmp; \
	curl -SL "https://github.com/swow/swow/archive/v1.0.0.tar.gz" -o swow.tar.gz; \
	ls -alh; \
	# php extension:swow
	cd /tmp; \
	mkdir -p swow; \
	tar -xf swow.tar.gz -C swow --strip-components=1; \
	( \
			cd swow/ext; \
			phpize; \
			./configure --enable-swow --enable-swow-ssl --enable-swow-curl; \
			make -s -j$(nproc); \
			make install \
	); \
	echo "memory_limit=1G" >  /usr/local/etc/php/conf.d/00-default.ini; \
	echo "opcache.enable_cli = 'On'" >>  /usr/local/etc/php/conf.d/50-opcache.ini; \
	echo "extension=swow.so" > /usr/local/etc/php/conf.d/docker-php-ext-swow.ini; \
	php --version; \
	php -m; \
	php --ri swow; \
	{{ if is_alpine then "apk del --no-network .build-deps;" else "" end}} \
	rm -rf /tmp/pear ~/.pearrc; \
	rm -rf /tmp/*
{{ ) else "" end -}}

RUN set -eux; \
	curl -o /usr/local/bin/composer https://mirrors.aliyun.com/composer/composer.phar; \
	chmod a+x /usr/local/bin/composer; \
	composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/

ENTRYPOINT ["docker-php-entrypoint"]
STOPSIGNAL SIGWINCH

WORKDIR ${APP_ROOT}

EXPOSE 80\
	443

CMD {{ env.cmd }}
